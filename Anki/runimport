#!/usr/bin/env python

import getpass
import os
import sys
import optparse
import tempfile
import __builtin__
import locale
import gettext

import shutil, time
from anki.utils import intTime
from aqt.sync import SyncThread


sys.path.insert(0, "/usr/share/anki")

from anki import version as _version
from anki.utils import isMac
import anki.db

from aqt.profiles import ProfileManager
from anki.importing.knowledgefile import KnowledgeImporter
from anki import Collection
from anki import stdmodels

pm = None #set on init
col = None #set after pm opens
thread= None 
def showUnicodeWarning():
    """Shorthand to show a standard warning."""
    print "Selected file was not in UTF-8 format. Please see the "

def importFile(file, deck):
    global col
    
    importer = KnowledgeImporter(col, file, deck)    

    try:
        importer.open()
    except UnicodeDecodeError:
        showUnicodeWarning()
        return
    except Exception, e:
        msg = repr(str(e))
        print msg
        return
    # diag = ImportDialog(mw, importer)
    try:
        importer.run()
        print "Importer runned"
    except Exception, e:
        msg = repr(str(e))
        print msg

def loadCollection():
    global pm, col
    cpath = pm.collectionPath()
    try:
        col = Collection(cpath, log=True)
    except anki.db.Error:
        # warn user
        print """Your collection is corrupt. Please see the manual for \
how to restore from a backup."""
        # move it out of the way so the profile can be used again
        newpath = cpath+str(intTime())
        os.rename(cpath, newpath)
        # then close
        sys.exit(1)
    except Exception, e:
        # the custom exception handler won't catch this if we immediately
        # unload, so we have to manually handle it
        if "invalidTempFolder" in repr(str(e)):
            print self.errorHandler.tempFolderMsg()
            return
        raise

def parseArgs(argv):
    "Returns (opts, args)."
    # py2app fails to strip this in some instances, then anki dies
    # as there's no such profile
    if isMac and len(argv) > 1 and argv[1].startswith("-psn"):
        argv = [argv[0]]
    parser = optparse.OptionParser(version="%prog " + _version)
    parser.usage = "%prog [OPTIONS] [file to import]"
    parser.add_option("-b", "--base", help="path to base folder")
    parser.add_option("-d", "--deck", help="Deck of choice")
    parser.add_option("-p", "--profile", help="profile name to load")
    parser.add_option("-s", "--sync", help="Sync after import?")
    parser.add_option("-l", "--lang", help="interface language (en, de, etc)")
    return parser.parse_args(argv[1:])

def run():
    global pm, col, thread
    opts, args = parseArgs(sys.argv)
    opts.base = unicode(opts.base or "", sys.getfilesystemencoding())
    opts.profile = unicode(opts.profile or "", sys.getfilesystemencoding())
    opts.deck = unicode(opts.deck or "", sys.getfilesystemencoding())
    opts.sync = unicode(opts.sync or "", sys.getfilesystemencoding())

    # pm = ProfileManager("", "Ranza")  
    pm = ProfileManager(opts.base, opts.profile)  
    pm.ensureProfile()
    loadCollection()
    
    if not opts.deck or opts.deck == "":
        opts.deck = "RandomFacts"
    print "Adding to deck [", opts.deck, "]"
    
    did = col.decks.id(opts.deck)
    col.decks.select(did)
    # if not isinstance(opts.deck, unicode):
    #     opts.deck = unicode(opts.deck, "utf8", "ignore")

    if args and args[0]:
        buf= args[0]
        if not isinstance(buf, unicode):
            buf = unicode(buf, "utf8", "ignore")
        importFile(buf, opts.deck)
    else:
        importFile("temp.csv",opts.deck)
    
    # check media db should cause latex to be generated
    col.media.check()
    col.save()
    col.close()
    if (opts.sync == "True"):
        thread = SyncThread(pm.collectionPath(), pm.profile['syncKey'], auth=None, media=pm.profile['syncMedia'])
        thread.start()
        while not thread.isFinished():
            thread.wait(100)
            if thread.syncMsg:
                print self.thread.syncMsg

if __name__ == "__main__":
    run()